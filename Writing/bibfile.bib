@article{LingZhen2021Sbtb,
issn = {1383-7621},
abstract = {With the extensive application of IoT techniques, IoT devices have become ubiquitous in daily lives. Meanwhile, attacks against IoT devices have emerged to compromise IoT devices by tampering with system pre-installed programs or injecting new malware. To mitigate these attacks, integrity enforcement of IoT systems has been proposed. The integrity of an IoT device system includes load-time integrity and runtime integrity. In this paper, we design an IoT system based on ARM TrustZone to enforce the system integrity. First, we establish the root of trust and propose a hybrid booting approach consisting of both secure boot and trusted boot to enforce the system load-time integrity. Second, we investigate a paging-based process integrity measurement method to measure the NW processes and conduct remote attestation based on the measurement results ensuring the NW runtime process integrity. We implement an IoT prototype system on a NXP i.MX6Q SABRE SD development board to assess its feasibility. Real-world experiment results demonstrate that our prototype introduces negligible performance overhead to the original system.},
journal = {Journal of systems architecture},
pages = {102240},
volume = {119},
publisher = {Elsevier B.V},
year = {2021},
title = {Secure boot, trusted boot and remote attestation for ARM TrustZone-based IoT Nodes},
copyright = {2021 Elsevier B.V.},
language = {eng},
address = {AMSTERDAM},
author = {Ling, Zhen and Yan, Huaiyu and Shao, Xinhui and Luo, Junzhou and Xu, Yiling and Pearson, Bryan and Fu, Xinwen},
keywords = {Computer Science ; Computer Science, Hardware & Architecture ; Computer Science, Software Engineering ; Integrity ; Internet of Things ; Science & Technology ; Spyware ; Technology ; TrustZone},
}

@article{TanHailun2015Arap,
issn = {1939-0114},
abstract = {Given the limited resources and computational power of current embedded sensor devices, memory protection is difficult to achieve and generally unavailable. Hence, the software run‐time buffer overflow that is used by the worm attacks in the Internet could be easily exploited to inject malicious codes into wireless sensor networks (WSNs). As a result, the remote attestation on the application codes installed in WSNs is the first important step to detect any unauthorized changes through the buffer overflow attack. Previous software‐based remote code verification approaches such as SoftWare‐based ATTestation and Secure Code Update By Attestation have been shown difficult to deploy in recent work. In this paper, we propose and implement a remote attestation protocol for detecting unauthorized tampering in the application codes running on sensor nodes with the assistance of Trusted Platform Modules (TPMs), a tiny, cost‐effective and tamper‐proof cryptographic micro‐controller. In our design, each sensor node is equipped with a TPM, and the firmware running on the node could be verified by the other sensor nodes in a WSN, including the sink. Specifically, we present a hardware‐based remote attestation protocol, discuss the potential attacks an adversary could launch against the protocol and provide comprehensive system performance results of the protocol in a multi‐hop sensor network testbed. The experimental results demonstrated that our scheme is able to attest the application codes running in sensor node with small delay (less than 25 s for single‐hop), considerable network lifetime and reasonable communication and energy overhead. Copyright © 2015 John Wiley & Sons, Ltd. This paper implements the remote attestation protocol with the hardware Trusted Platform Module. It can defend several memory‐based attacks. In addition, we have provided the extensive evaluations for this protocol.},
journal = {Security and communication networks},
pages = {2171--2188},
volume = {8},
publisher = {Blackwell Publishing Ltd},
number = {13},
year = {2015},
title = {A remote attestation protocol with Trusted Platform Modules (TPMs) in wireless sensor networks},
edition = {Tan, H, Hu, W, and Jha, S (2015), A remote attestation protocol with Trusted Platform Modules (TPMs) in wireless sensor networks.. Security Comm. Networks, 8, 2171-2188. doi: 10.1002/sec.1162.},
copyright = {Copyright © 2015 John Wiley & Sons, Ltd.},
language = {eng},
address = {LONDON},
author = {Tan, Hailun and Hu, Wen and Jha, Sanjay},
keywords = {Computer Science ; Computer Science, Information Systems ; Remote attestation ; Science & Technology ; Technology ; Telecommunications ; Trusted Platform Module ; Wireless sensor networks},
}

@article{AlamMasoom2012Aoer,
issn = {1939-0114},
abstract = {This paper has been written as a part of the research project that is working towards the implementation of dynamic behavioral attestation for mobile platforms. The motivation behind this paper was to analyze the existing remote attestation techniques in order to figure out their strengths and weaknesses. We have analyzed Integrity Measurement Architecture, Policy‐reduced Integrity Measurement Architecture, Property‐based Attestation, Remote Attestation on Program Execution, Semantic Remote Attestation, Trustable Remote Verification of Web Services, and Model‐based Behavior Attestation. Each of the existing remote attestation techniques was found to be effective in some situations but was found to be infeasible in others. Therefore, a new remote attestation technique is needed, which is platform independent and flexible enough to meet the challenges of today's scalable computing environments. Copyright © 2011 John Wiley & Sons, Ltd. In this paper, we discuss and try to answer the question of why Remote Attestation techniques have proven unsuccessful in the real world. This will hopefully lead towards the development of a new remote attestation technique that leverages the benefits of the existing ones and builds on top of them to remedy their limitations.},
journal = {Security and communication networks},
pages = {1062--1082},
volume = {5},
publisher = {John Wiley & Sons, Ltd},
number = {9},
year = {2012},
title = {Analysis of existing remote attestation techniques},
copyright = {Copyright © 2011 John Wiley & Sons, Ltd.},
language = {eng},
address = {Chichester, UK},
author = {Alam, Masoom and Ali, Tamleek and Khan, Sanaullah and Khan, Shahbaz and Ali, Muhammad and Nauman, Mohammad and Hayat, Amir and Khurram Khan, Muhammad and Alghathbar, Khaled},
keywords = {Computer Science ; Computer Science, Information Systems ; Integrity measurement ; Remote attestation ; Science & Technology ; Technology ; Telecommunications ; Trusted computing},
}

@article{CokerGeorge2011Pora,
issn = {1615-5262},
abstract = {Remote attestation is the activity of making a claim about properties of a target by supplying evidence to an appraiser over a network. We identify five central principles to guide development of attestation systems. We argue that (i) attestation must be able to deliver temporally fresh evidence; (ii) comprehensive information about the target should be accessible; (iii) the target, or its owner, should be able to constrain disclosure of information about the target; (iv) attestation claims should have explicit semantics to allow decisions to be derived from several claims; and (v) the underlying attestation mechanism must be trustworthy. We illustrate how to acquire evidence from a running system, and how to transport it via protocols to remote appraisers. We propose an architecture for attestation guided by these principles. Virtualized platforms, which are increasingly well supported on stock hardware, provide a natural basis for our attestation architecture.},
journal = {International journal of information security},
pages = {63--81},
volume = {10},
publisher = {Springer-Verlag},
number = {2},
year = {2011},
title = {Principles of remote attestation},
copyright = {Springer-Verlag 2011},
language = {eng},
address = {Berlin/Heidelberg},
author = {Coker, George and Guttman, Joshua and Loscocco, Peter and Herzog, Amy and Millen, Jonathan and O’Hanlon, Brian and Ramsdell, John and Segall, Ariel and Sheehy, Justin and Sniffen, Brian},
keywords = {Coding and Information Theory ; Communications Engineering ; Communications Engineering, Networks ; Computer Communication Networks ; Computer Science ; Computer Science, Information Systems ; Computer Science, Software Engineering ; Computer Science, Theory & Methods ; Cryptographic protocols ; Cryptology ; Data Encryption ; Hardware Security Modules ; Management of Computing and Information Systems ; Networks ; Operating system security architecture ; Operating Systems ; Public contracts ; Science & Technology ; Special Issue Paper ; Strand spaces ; Technology ; Trust and attestation},
}

@inproceedings{GuLiang2008Raop,
series = {STC '08},
issn = {1543-7221},
abstract = {Remote attestation provides the basis for one platform to establish trusts on another. In this paper, we consider the problem of attesting the correctness of program executions. We propose to measure the target program and all the objects it depends on, with an assumption that the Secure Kernel and the Trusted Platform Module provide a secure execution environment through process separation. The attestation of the target program begins with a program analysis on the source code or the binary code in order to find out the relevant executables and data objects. Whenever such a data object is accessed or a relevant executable is invoked due to the execution of the target program, its state is measured for attestation. Our scheme not only testifies to a program's execution, but also supports fine-granularity attestations and information flow checking.},
pages = {11--20},
publisher = {ACM},
booktitle = {Proceedings of the 3rd ACM workshop on scalable trusted computing},
isbn = {9781605582955},
year = {2008},
title = {Remote attestation on program execution},
copyright = {Copyright 2009 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Gu, Liang and Ding, Xuhua and Deng, Robert and Xie, Bing and Mei, Hong},
keywords = {Program dependency ; Remote attestation ; Trusted computing},
}

@inproceedings{AlamMasoom2008Mba,
series = {SACMAT '08},
abstract = {Remote attestation is an important characteristic of trusted computing technology which provides reliable evidence that a trusted environment actually exists. Existing approaches for the realization of remote attestation measure the trustworthiness of a target platform from its binaries, configurations, properties or security policies. All these approaches are low-level attestation techniques only, and none of them define what a trusted behavior actually is and how to specify it. In this paper, we present a novel approach where the trustworthiness of a platform is associated with the behavior of a policy model. In our approach, the behavior of a policy model is attested rather than a software or hardware platform. Thus, the attestation feature is not tied to a specific software or hardware platform, or to a particular remote attestation technique, or to an individual type of security policy. We select usage control (UCON) as our target policy model as it is a comprehensive and exible model. We propose a framework to identify, specify, and attest different behaviors of UCON.},
pages = {175--184},
publisher = {ACM},
booktitle = {Proceedings of ACM Symposium on Access Control Models and Technologies, SACMAT},
isbn = {9781605581293},
year = {2008},
title = {Model-based behavioral attestation},
copyright = {Copyright 2008 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Alam, Masoom and Zhang, Xinwen and Nauman, Mohammad and Ali, Tamleek and Seifert, Jean-Pierre},
keywords = {Behavioral attestation ; High-level framework ; highlevel framework ; Remote attestation ; UCON},
}

@incollection{MuhlbergJanTobias2016LaFT,
series = {Lecture Notes in Computer Science},
issn = {0302-9743},
abstract = {In this paper we describe a novel approach to securely obtain measurements with respect to the integrity of software running on a low-cost and low-power computing node autonomously or on request. We propose to use these measurements as an indication of the trustworthiness of that node. Our approach is based on recent developments in Program Counter Based Access Control. Specifically, we employ Sancus, a light-weight hardware-only Trusted Computing Base and Protected Module Architecture, to integrate trust assessment modules into an untrusted embedded OS without using a hypervisor. Sancus ensures by means of hardware extensions that code and data of a protected module cannot be tampered with, and that the module’s data remains confidential. Sancus further provides cryptographic primitives that are employed by our approach to enable the trust management system to verify that the obtained trust metrics are authentic and fresh. Thereby, our trust assessment modules can inspect the OS or application code and securely report reliable trust metrics to an external trust management system. We evaluate a prototypic implementation of our approach that integrates Sancus-protected trust assessment modules with the Contiki OS running on a Sancus-enabled TI MSP430 microcontroller.},
pages = {503--520},
volume = {9326},
publisher = {Springer International Publishing},
booktitle = {Computer Security -- ESORICS 2015},
isbn = {9783319241739},
year = {2016},
title = {Lightweight and Flexible Trust Assessment Modules for the Internet of Things},
copyright = {Springer International Publishing Switzerland 2015, Open Access This chapter is licensed under the terms of the Creative Commons Attribution-NonCommercial 2.5 International License (http://creativecommons.org/licenses/by-nc/2.5/), which permits any noncommercial use, sharing, adaptation, distribution and reproduction in any medium or format, as long as you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license and indicate if changes were made. The images or other third party material in this chapter are included in the chapter's Creative Commons license, unless indicated otherwise in a credit line to the material. If material is not included in the chapter's Creative Commons license and your intended use is not permitted by statutory regulation or exceeds the permitted use, you will need to obtain permission directly from the copyright holder.},
language = {eng},
address = {Cham},
author = {Mühlberg, Jan Tobias and Noorman, Job and Piessens, Frank},
keywords = {Internet of Things ; Protected software modules ; Trust assessment ; Trust management ; Wireless sensor networks},
}

@inproceedings{SabtMohamed2015TEEW,
abstract = {Nowadays, there is a trend to design complex, yet secure systems. In this context, the Trusted Execution Environment (TEE) was designed to enrich the previously defined trusted platforms. TEE is commonly known as an isolated processing environment in which applications can be securely executed irrespective of the rest of the system. However, TEE still lacks a precise definition as well as representative building blocks that systematize its design. Existing definitions of TEE are largely inconsistent and unspecific, which leads to confusion in the use of the term and its differentiation from related concepts, such as secure execution environment (SEE). In this paper, we propose a precise definition of TEE and analyze its core properties. Furthermore, we discuss important concepts related to TEE, such as trust and formal verification. We give a short survey on the existing academic and industrial ARM TrustZone-based TEE, and compare them using our proposed definition. Finally, we discuss some known attacks on deployed TEE as well as its wide use to guarantee security in diverse applications.},
pages = {57--64},
volume = {1},
publisher = {IEEE},
booktitle = {2015 IEEE Trustcom/BigDataSE/ISPA},
isbn = {9781467379526},
year = {2015},
title = {Trusted Execution Environment: What It is, and What It is Not},
copyright = {Distributed under a Creative Commons Attribution 4.0 International License},
language = {eng},
author = {Sabt, Mohamed and Achemlal, Mohammed and Bouabdallah, Abdelmadjid},
keywords = {Computer Science ; Context ; Cryptography and Security ; DRTM ; Hardware ; Kernel ; Runtime ; secure boot ; secure scheduling ; Secure storage ; Security ; survey ; TEE ; trusted UI ; TrustZone},
}

@article{PintoSandro2019DATA,
issn = {0360-0300},
abstract = {The world is undergoing an unprecedented technological transformation, evolving into a state where ubiquitous Internet-enabled "things" will be able to generate and share large amounts of security- and privacy-sensitive data. To cope with the security threats that are thus foreseeable, system designers can find in Arm TrustZone hardware technology a most valuable resource. TrustZone is a System-on-Chip and CPU system-wide security solution, available on today's Arm application processors and present in the new generation Arm microcontrollers, which are expected to dominate the market of smart "things." Although this technology has remained relatively underground since its inception in 2004, over the past years, numerous initiatives have significantly advanced the state of the art involving Arm TrustZone. Motivated by this revival of interest, this paper presents an in-depth study of TrustZone technology. We provide a comprehensive survey of relevant work from academia and industry, presenting existing systems into two main areas, namely, Trusted Execution Environments and hardware-assisted virtualization. Furthermore, we analyze the most relevant weaknesses of existing systems and propose new research directions within the realm of tiniest devices and the Internet of Things, which we believe to have potential to yield high-impact contributions in the future.},
journal = {ACM computing surveys},
pages = {1--36},
volume = {51},
publisher = {ACM},
number = {6},
year = {2019},
title = {Demystifying Arm TrustZone: A Comprehensive Survey},
copyright = {Copyright 2019 Elsevier B.V., All rights reserved.},
language = {eng},
address = {NEW YORK},
author = {Pinto, Sandro and Santos, Nuno},
keywords = {Arm ; Computer Science ; Computer Science, Theory & Methods ; Science & Technology ; Security ; Survey ; Technology ; TEE ; TrustZone ; Virtualization},
}

@online{PinePhone,
  author = {{PINE64}},
  title = {{PINE64} PinePhone},
  year = 2021,
  url = {https://www.pine64.org/pinephone/},
  urldate = {2022-04-26}
}

@online{OP-TEE,
  author = {{OP-TEE}},
  title = {{OP-TEE} About OP-TEE},
  year = 2022,
  url = {https://optee.readthedocs.io/en/latest/general/about.html},
  urldate = {2022-04-26}
}

@article{YuAimin2008BAti,
issn = {1007-1202},
abstract = {Two limitations of current integrity measurement architectures are pointed out: ➀ a reference value is required for every measured entity to verify the system states, as is impractical however; ➁ malicious user can forge proof of inexistent system states. This paper proposes a trustworthy integrity measurement architecture, BBACIMA, through enforcing behavior-based access control for trusted platform module (TPM). BBACIMA introduces a TPM reference monitor (TPMRM) to ensure the trustworthiness of integrity measurement. TPMRM enforces behavior-based access control for the TPM and is isolated from other entities which may be malicious. TPMRM is the only entity manipulating TPM directly and all PCR (platform configuration register) operation requests must pass through the security check of it so that only trusted processes can do measurement and produce the proof of system states. Through these mechanisms malicious user can not enforce attack which is feasible in current measurement architectures.},
journal = {Wuhan University journal of natural sciences},
pages = {513--518},
volume = {13},
publisher = {Wuhan University},
number = {5},
year = {2008},
title = {BBACIMA: A trustworthy integrity measurement architecture through behavior-based TPM access control},
copyright = {Wuhan University and Springer-Verlag GmbH 2008},
language = {eng},
address = {Heidelberg},
author = {Yu, Aimin and Feng, Dengguo},
keywords = {Article ; Behavior-based access control ; Biomedical and Life Sciences ; Computer Science ; Computer Science, general ; general ; Integrity measurement ; Life Sciences ; Life Sciences, general ; Materials Science ; Mathematics ; Mathematics, general ; Physics, general ; Remote a0ttestation ; remote attestation ; TN 918.4 ; Trusted computing ; trusted platform module (TPM)},
}

@inproceedings{JaegerTrent2006Ppim,
series = {SACMAT '06},
abstract = {We propose an integrity measurement approach based on information flow integrity,which we call the Policy-Reduced Integrity Measurement Architecture (PRIMA).The recent availability of secure hardware has made it practical for a system to measure its own integrity, such that it can generate an integrity proof for remote parties. Various approaches have been proposed,but most simply measure the loaded code and static data to approximate runtime system integrity.We find that these approaches suffer from two problems: (1)the load-time measurements of code alone do not accurately reflect runtime behaviors,such as the use of untrusted network data,and (2) they are ineficient,requiring all measured entities to be known and fully trusted even if they have no impact on the target application.Classical integrity models are based on information flow,so we design the PRIMA approach to enable measurement of information flow integrity and prove that it achieves these goals. We prove how a remote party can verify useful information flow integrity properties using PRIMA. A PRIMA prototype has been built based on the open-source Linux Integrity Measurement Architecture (IMA)using SELinux policies to provide the information flow.},
pages = {19--28},
publisher = {ACM},
booktitle = {Proceedings of the eleventh ACM symposium on access control models and technologies},
isbn = {1595933530},
year = {2006},
title = {PRIMA: policy-reduced integrity measurement architecture},
language = {eng},
author = {Jaeger, Trent and Sailer, Reiner and Shankar, Umesh},
keywords = {Clark-Wilson Lite integrity ; information flow ; remote attestation},
}

@inproceedings{DuanJialiang2020IMBo,
abstract = {The Trusted Execution Environment (TEE) is a safe area on the processor of all kinds of mobile smart devices. With the continuous development of TEE, attack methods against it have gradually appeared. Existing research has proposed existing attack methods that are solved by the security enhancement solution of the TEEv virtualization architecture, but it still cannot solve the problems that will affect other TEEs after being attacked, and the monitor cannot understand the overall security status of the equipment, which makes it impossible to completely solve the hidden dangers. In order to solve these problems in the TEEv virtualization architecture, a dynamic integrity measurement system is introduced to monitor the operating status of the system in real time, and through experiments, the accuracy of kernel attack detection and the impact of the dynamic measurement system on system performance are obtained. Experimental results show that the introduced dynamic integrity measurement system can effectively detect kernel attacks and feed back to the monitor, making the TEEv virtualization architecture more secure.},
pages = {370--376},
publisher = {IEEE},
booktitle = {2020 5th International Conference on Mechanical, Control and Computer Engineering (ICMCCE)},
isbn = {9780738105208},
year = {2020},
title = {Integrity Measurement Based on TEE Virtualization Architecture},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Duan, Jialiang and Cai, Guoming and Xu, Kaiyong and Guo, Song},
keywords = {Computer architecture ; Integrity measure ; Mechanical variables measurement ; Real-time systems ; Refining ; System performance ; Time measurement ; Trusted Execution Environment ; Virtualization},
}

@article{KucabMichal2021Raai,
issn = {0167-4048},
abstract = {With response to the emerging virtualization trend, we focus on a Virtual Machine (VM) remote attestation process assuming that it is running in an uncontrolled and untrusted cloud infrastructure. We present a solution that is able to establish a chain of trust in a cloud environment. Our solution is based on a set of CPU instructions and it does not need any additional components to track host modifications. Our solution enables integrity verification of a filesystem. Additionally, it ensures trust level assessment for remote VMs during their startup or while triggered manually at any point in time afterwards. We identify security properties for our solution and show how it meets them. The security analysis shows that with necessary countermeasures, the proposed model can ensure the required level of security. Additionally, We evaluate the performance impact of the prototype and virtualization overhead for a real-life scenario. Here, we assume that small configuration files, binaries, and executables are most critical. The results show that important filesystem components can be verified with a minimum impact on a startup time. This way, the whole proposal allows for making VM a part of a trusted compute resource pool.},
journal = {Computers \& security},
pages = {102300},
volume = {106},
publisher = {Elsevier Ltd},
year = {2021},
title = {Remote attestation and integrity measurements with Intel SGX for virtual machines},
copyright = {2021 Elsevier Ltd},
language = {eng},
address = {OXFORD},
author = {Kucab, Michal and Borylo, Piotr and Cholda, Piotr},
keywords = {Analysis ; Computer Science ; Computer Science, Information Systems ; Investment analysis ; Remote attestation ; Science \& Technology ; Security management ; SGX ; Technology ; TPM ; Virtual computer systems ; Virtualization},
}

@article{QinYu2020RRIP,
issn = {1939-0114},
abstract = {Software attacks like worm, botnet, and DDoS are the increasingly serious problems in IoT, which had caused large-scale cyber attack and even breakdown of important information infrastructure. Software measurement and attestation are general methods to detect software integrity and their executing states in IoT. However, they cannot resist TOCTOU attack due to their static features and seldom verify correctness of control flow integrity. In this paper, we propose a novel and practical scheme for software trusted execution based on lightweight trust. Our scheme RIPTE combines dynamic measurement and control flow integrity with PUF device binding key. Through encrypting return address of program function by PUF key, RIPTE can protect software integrity at runtime on IoT device, enabling to prevent the code reuse attacks. The results of our prototype’s experiment show that it only increases a small size TCB and has a tiny overhead in IoT devices under the constraint on function calling. In sum, RIPTE is secure and efficient in IoT device protection at runtime.},
journal = {Security and communication networks},
volume = {2020},
publisher = {Hindawi},
year = {2020},
title = {RIPTE: Runtime Integrity Protection Based on Trusted Execution for IoT Device},
copyright = {Copyright © 2020 Yu Qin et al.},
language = {eng},
address = {LONDON},
author = {Qin, Yu and Liu, Jingbin and Zhao, Shijun and Feng, Dengguo and Feng, Wei},
keywords = {Computer Science ; Computer Science, Information Systems ; Cyberterrorism ; Science & Technology ; Technology ; Telecommunications},
}

@article{AliToqeer2017Daio,
issn = {0920-8542},
abstract = {Security of applications running on remote devices has become an essential need of enterprises. For this purpose, several software-based solutions have been proposed. However, it has been observed that software solutions are vulnerable to several kinds of attacks. Moreover, they cannot protect and monitor all parts of the system. To overcome this problem, researchers have proposed to monitor a target system from an isolated hardware and store system’s sensitive information in its tamper-proof memory locations. To realize such a solution, Trusted Computing Group (TCG) has proposed the specifications of a co-processor called Trusted Platform Module which is widely available in commodity hardware. Integrity Measurement Architecture is one of the well-known static techniques that brings TCG’s attestation from kernel to the application level. However, this method cannot measure runtime behavior of applications, which is necessary to detect runtime attacks such as buffer overflow and return-oriented programming. In this paper, we have extended the base work which aims to detect runtime vulnerabilities. Current high-level-based attestation protocol has been extended for dynamic behavior collection and verification, and the dynamic behavior is verified via several machine learning algorithms. Our results justify the use of this approach and show that a high rate detection was achieved for datasets of real-world vulnerabilities in the popular Firefox browser.},
journal = {The Journal of supercomputing},
pages = {5746--5773},
volume = {74},
publisher = {Springer US},
number = {11},
year = {2017},
title = {Design and implementation of an attestation protocol for measured dynamic behavior},
copyright = {Springer Science+Business Media New York 2017},
language = {eng},
address = {New York},
author = {Ali, Toqeer and Ismail, Roslan and Musa, Shahrulniza and Nauman, Mohammad and Khan, Sohail},
keywords = {Algorithms ; Article ; Compilers ; Computer memory ; Computer Science ; Computer Science, general ; Computer Science, Hardware & Architecture ; Computer Science, Theory & Methods ; Computer security ; Data mining ; Deep learning and android ; Dynamic behavior ; Engineering ; Engineering, Electrical & Electronic ; general ; Hardware ; Interpreters ; Islamic schools ; Machine learning ; Measurement ; Microprocessors ; Processor Architectures ; Programming Languages ; Programming Languages, Compilers, Interpreters ; Remote attestation ; Remote verification ; Run time (computers) ; Science & Technology ; Software ; Software reliability ; Technology ; TPM ; Trusted computing ; Usage},
}

@inproceedings{StelteB2010Timi,
abstract = {Today, the security of virtualization is based on the isolation properties provided by the hypervisor. This security-by-isolation concept depends on the high integrity of each virtual system as well as a trustworthy host system. Erroneous implementation or conceptional failure limits this isolation mechanism. Today the strength of the isolation can only be guaranteed after a boot operation. Missing is a permanent surveillance of the separation mechanisms during the system operation. That is the main subject of our proposal. We suggest the integration of a sensory integrity measurement architecture (SIMA) for this purpose. SIMA consists of trusted virtual sensors and an analyzing sink to monitor the integrity of the system permanently during operation. Additionally, to have integrity from the beginning, the capabilities of a TPM are used to assure a trusted boot process.},
pages = {106--112},
publisher = {IEEE},
booktitle = {2010 IEEE International Conference on Technologies for Homeland Security (HST)},
isbn = {1424460476},
year = {2010},
title = {Towards integrity measurement in virtualized environments - A hypervisor based sensory integrity measurement architecture (SIMA)},
copyright = {Copyright 2011 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Stelte, B and Koch, R and Ullmann, M},
keywords = {Additionally ; Computer architecture ; Monitoring ; Security ; Sensor systems ; the capabilities of a TPM are used to assure a trusted boot process ; to have integrity from the beginning ; Virtual machine monitors ; Virtual machining},
}

@inproceedings{BaHaihe2017RMAf,
issn = {1060-9857},
abstract = {While Java Virtual Machine can provide applications with safety property to avoid memory corruption bugs, it continues to encounter some security flaws. Real world exploits show that the current sandbox model can be bypassed. In this paper, we focus our work on bytecode integrity measurement in clouds to identify malicious execution and propose J-IMA architecture to provide runtime measurement and remote attestation for bytecode integrity. To the best of our knowledge, our work is the first measurement approach for dynamically-generated bytecode integrity. Moreover, J-IMA has no need for any modification to host systems and any access to source code.},
pages = {262--263},
volume = {2017-},
publisher = {IEEE},
booktitle = {2017 IEEE 36th Symposium on Reliable Distributed Systems (SRDS)},
isbn = {9781538616796},
year = {2017},
title = {Runtime Measurement Architecture for Bytecode Integrity in JVM-Based Cloud},
copyright = {Copyright 2017 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Ba, Haihe and Zhou, Huaizhe and Ren, Jiangchun and Wang, Zhiying},
keywords = {Cloud computing ; Computer architecture ; Current measurement ; Java ; Runtime ; Security ; Virtual machining},
}

@article{MATSUMOTOTsutomu2021SCUa,
issn = {0916-8524},
abstract = {The Internet of Things (IoT) implicates an infrastructure that creates new value by connecting everything with communication networks, and its construction is rapidly progressing in anticipation of its great potential. Enhancing the security of IoT is an essential requirement for supporting IoT. For ensuring IoT security, it is desirable to create a situation that even a terminal component device with many restrictions in computing power and energy capacity can easily verify other devices and data and communicate securely by the use of public key cryptography. To concretely achieve the big goal of penetrating public key cryptographic technology to most IoT end devices, we elaborated the secure cryptographic unit (SCU) built in a low-end microcontroller chip. The SCU comprises a hardware cryptographic engine and a built-in access controlling functionality consisting of a software gate and hardware gate. This paper describes the outline of our SCU construction technology's research and development and prospects.},
journal = {IEICE transactions on electronics},
pages = {262--271},
volume = {E104.C},
publisher = {The Institute of Electronics, Information and Communication Engineers},
number = {7},
year = {2021},
title = {Secure Cryptographic Unit as Root-of-Trust for IoT Era},
copyright = {2021 The Institute of Electronics, Information and Communication Engineers},
language = {eng},
address = {TOKYO},
author = {MATSUMOTO, Tsutomu and IKEDA, Makoto and NAGATA, Makoto and UEMURA, Yasuyoshi},
keywords = {Engineering ; Engineering, Electrical & Electronic ; IoT ; public-key cryptography ; root of trust ; Science & Technology ; security IP ; Technology},
}

@incollection{FotiadisGeorgios2021RAfS,
series = {Lecture Notes in Computer Science},
issn = {0302-9743},
abstract = {A key component in building trusted computing services is a highly secure anchor that serves as a Root-of-Trust (RoT). There are several works that conduct formal analysis on the security of such commodity RoTs (or parts of it), and also a few ones devoted to verifying the trusted computing service as a whole. However, most of the existing schemes try to verify security without differentiating the internal cryptography mechanisms of the underlying hardware token from the client application cryptography. This approach limits, to some extent, the reasoning that can be made about the level of assurance of the overall system by automated reasoning tools. In this work, we present a methodology that enables the use of formal verification tools towards verifying complex protocols using trusted computing. The focus is on reasoning about the overall application security, provided from the integration of the RoT services, and how these can translate to larger systems when the underlying cryptographic engine is considered perfectly secure. Using the Tamarin prover, we demonstrate the feasibility of our approach by instantiating it for a TPM-based remote attestation service, which is one of the core security services needed in today’s increased attack landscape.},
pages = {163--184},
volume = {13075},
publisher = {Springer International Publishing},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
isbn = {9783030918583},
year = {2021},
title = {Root-of-Trust Abstractions for Symbolic Analysis: Application to Attestation Protocols},
copyright = {These electronic books are licensed by OhioLINK and may be under copyright protection. Please see the Acceptable Use Guidelines for more information, or contact your librarian.},
language = {eng},
address = {Cham},
author = {Fotiadis, Georgios and Moreira, José and Giannetsos, Thanassis and Chen, Liqun and Rønne, Peter B and Ryan, Mark D and Ryan, Peter Y. A},
keywords = {Formal verification ; Remote attestation ; SAPiC ; Tamarin prover ; TPM modelling ; Trusted computing},
}

@book{2006Tpmb,
series = {Mbedded technology series},
issn = {0-7506-7960-3},
abstract = {* Clear, practical tutorial style text with real-world applications * First book on TPM for embedded designers * Provides a sound foundation on the TPM, helping designers take advantage of hardware security based on sound TCG standards* Covers all the TPM basics, discussing in detail the TPM Key Hierarchy and the Trusted Platform Module specification* Presents a methodology to enable designers and developers to successfully integrate the TPM into an embedded design and verify the TPM's operation on a specific platform* Includes an accompanying CD},
publisher = {Elsevier Newnes},
isbn = {1280637005},
year = {2006},
title = {Trusted platform module basics: using TPM in embedded systems},
address = {Amsterdam ; Boston},
author = {Kinney, Steven},
keywords = {Embedded computer systems.},
}

@inproceedings{ZhaoShijun2021RoRo,
abstract = {Aiming at the problem that embedded devices generally lack hardware trust root and cannot use trusted computing technology to guarantee their operating environment, this paper proposes a method of using on-chip storage to provide trust root and trusted computing services for embedded devices. The physical unclonable function of on-chip memory is used to implement basic security mechanisms such as key storage and random numbers, and then builds a trusted computing environment based on these security mechanisms. The root of trust includes trusted computing primitives such as data sealing and unsealing. The root of trust can provide basic trusted computing services for embedded devices, so that it ensures the security and controllability of the whole embedded device running environment. In this paper, a prototype system is implemented on a hardware embedded device. The test results of prototype system show that the trusted computing root of trust construction method proposed only adds a small amount of basic code lines to the system, and its performance can meet the requirements of embedded applications.},
pages = {501--505},
publisher = {IEEE},
booktitle = {2021 International Conference on Computer Engineering and Application (ICCEA)},
isbn = {9781665426169},
year = {2021},
title = {Research on Root of Trust for Embedded Devices based on On-Chip Memory},
copyright = {Copyright The Institute of Electrical and Electronics Engineers, Inc. (IEEE) 2021},
language = {eng},
address = {Piscataway},
author = {Zhao, Shijun and Lin, Jiangnan and Li, Wei and Qi, Bin},
keywords = {Chips (memory devices) ; Computation ; Controllability ; Electronic devices ; Embedded Devices ; Embedded systems ; Feasibility ; Generators ; Hardware ; Memory devices ; On-chip Memory ; Performance evaluation ; Physical unclonable function ; Prototypes ; Random numbers ; Root of Trust ; Security ; Trust ; Trusted computing},
}

@inproceedings{VanBulckJo2019AToT,
series = {CCS '19},
issn = {1543-7221},
abstract = {This paper analyzes the vulnerability space arising in Trusted Execution Environments (TEEs) when interfacing a trusted enclave application with untrusted, potentially malicious code. Considerable research and industry effort has gone into developing TEE runtime libraries with the purpose of transparently shielding enclave application code from an adversarial environment. However, our analysis reveals that shielding requirements are generally not well-understood in real-world TEE runtime implementations. We expose several sanitization vulnerabilities at the level of the Application Binary Interface (ABI) and the Application Programming Interface (API) that can lead to exploitable memory safety and side-channel vulnerabilities in the compiled enclave. Mitigation of these vulnerabilities is not as simple as ensuring that pointers are outside enclave memory. In fact, we demonstrate that state-of-the-art mitigation techniques such as Intel's edger8r, Microsoft's "deep copy marshalling", or even memory-safe languages like Rust fail to fully eliminate this attack surface. Our analysis reveals 35 enclave interface sanitization vulnerabilities in 8 major open-source shielding frameworks for Intel SGX, RISC-V, and Sancus TEEs. We practically exploit these vulnerabilities in several attack scenarios to leak secret keys from the enclave or enable remote code reuse. We have responsibly disclosed our findings, leading to 5 designated CVE records and numerous security patches in the vulnerable open-source projects, including the Intel SGX-SDK, Microsoft Open Enclave, Google Asylo, and the Rust compiler.},
pages = {1741--1758},
publisher = {ACM},
booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on computer and communications security},
isbn = {9781450367479},
year = {2019},
title = {A Tale of Two Worlds: Assessing the Vulnerability of Enclave Shielding Runtimes},
copyright = {Copyright 2019 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Van Bulck, Jo and Oswald, David and Marin, Eduard and Aldoseri, Abdulla and Garcia, Flavio and Piessens, Frank},
keywords = {Intel SGX ; Memory safety ; Side-channels ; TEE ; Trusted execution},
}

@incollection{GuoPengfei2021RoAT,
series = {Lecture Notes in Computer Science},
issn = {0302-9743},
abstract = {Arm TrustZone technology is the most widely used system-level security framework, which provides a trusted execution environment (TEE) for embedded system SoC. This paper introduces the technical principle of TrustZone in detail, explains how to extend the security features from CPU to the whole system through various security components, and briefly introduces the secure boot, the application of TrustZone in mobile devices and the variant technology based on TrustZone. At the same time, there are many attacks on TrustZone. According to the cache architecture of TrustZone, each cache line uses a NS bit to indicate whether the line belongs to secure world or normal world. The purpose is to avoid refreshing when switching the two worlds, thus reducing the performance loss. However, it supports cache lines in the two worlds to compete and evict each other, this provides an opportunity for cache attacks, and this article details this security Vulnerability.},
pages = {200--213},
volume = {12382},
publisher = {Springer International Publishing},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
isbn = {9783030688509},
year = {2021},
title = {Research on Arm TrustZone and Understanding the Security Vulnerability in Its Cache Architecture},
copyright = {These electronic books are licensed by OhioLINK and may be under copyright protection. Please see the Acceptable Use Guidelines for more information, or contact your librarian.},
language = {eng},
address = {Cham},
author = {Guo, Pengfei and Yan, Yingjian and Zhu, Chunsheng and Wang, Junjie},
keywords = {Arm TrustZone ; Cache architecture ; Cache attacks ; Secure isolation ; TEE},
}

@inproceedings{KhalidFatima2020HITS,
abstract = {Hardware-assisted isolation technology provide a Trusted Execution Environment (TEE) for the Trusted Computing Base (TCB) of a system. Since there is no standardization for such systems, many technologies using different approaches have been implemented over time. Before selecting or implementing a TEE, it is essential to understand the security architecture, features and analyze the technologies with respect to the new security vulnerabilities (i.e. Micro-architectural class of vulnerabilities). These technologies can be divided into two main types: 1) Isolation by software virtualization and 2) Isolation by hardware. In this paper, we discuss technology implementation of each type i.e. Intel SGX and ARM TrustZone for type-1; Intel ME and AMD Secure Processor for type-2. We also cover the vulnerability analysis against each technology with respect to the latest discovered attacks. This would enable a user to precisely appreciate the security capabilities of each technology.},
pages = {1--8},
publisher = {IEEE},
booktitle = {1st Annual International Conference on Cyber Warfare and Security, ICCWS 2020 - Proceedings},
isbn = {9781728168401},
year = {2020},
title = {Hardware-Assisted Isolation Technologies: Security Architecture and Vulnerability Analysis},
copyright = {Copyright 2022 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Khalid, Fatima and Masood, Ammar},
keywords = {AMD Secure Processor ; ARM TrustZone ; Computer architecture ; Cryptography ; Hardware ; Hardware-assisted isolation ; Intel ME ; Intel SGX ; Isolation technology ; Monitoring ; Security ; TEE ; Trusted Computing Base (TCB) ; Trusted Execution Environment ; Virtualization},
}

@inproceedings{Machiry2017BOOMERANGET,
abstract = {In the past decade, we have come to rely on computers for various safety and security-critical tasks, such as securing our homes, operating our vehicles, and controlling our finances. To facilitate these tasks, chip manufacturers have begun including trusted execution environments (TEEs) in their processors, which enable critical code (e.g., cryptographic functions) to run in an isolated hardware environment that is protected from the traditional operating system (OS) and its applications. While code in the untrusted environment (e.g., Android or Linux) is forbidden from accessing any memory or state within the TEE, the code running in the TEE, by design, has unrestricted access to the memory of the untrusted OS and its applications. However, due to the isolation between these two environments, the TEE has very limited visibility into the untrusted environment   s security mechanisms (e.g., kernel vs. application memory). In this paper, we introduce BOOMERANG, a class of vulnerabilities that arises due to this semantic separation between the TEE and the untrusted environment. These vulnerabilities permit untrusted user-level applications to read and write any memory location in the untrusted environment, including security-sensitive kernel memory, by leveraging the TEE   s privileged position to perform the operations on its behalf. BOOMERANG can be used to steal sensitive data from other applications, bypass security checks, or even gain full control of the untrusted OS. To quantify the extent of this vulnerability, we developed an automated framework for detecting BOOMERANG bugs within the TEEs of popular mobile phones. Using this framework, we were able to confirm the existence of BOOMERANG on four different TEE platforms, affecting hundreds of millions of devices on the market today. Moreover, we confirmed that, in at least two instances, BOOMERANG could be leveraged to completely compromise the untrusted OS (i.e., Android). While the implications of these vulnerabilities are severe, defenses can be quickly implemented by vendors, and we are currently in contact with the affected TEE vendors to deploy adequate fixes. To this end, we evaluated the two most promising defense proposals and their inherent trade-offs. This analysis led the proposal of a novel BOOMERANG defense, addressing the major shortcomings of the existing defenses with minimal performance overhead. Our findings have been reported to and verified by the corresponding vendors, who are currently in the process of creating security patches.},
publisher = {ndss symposium},
booktitle = {NDSS},
year = {2017},
title = {BOOMERANG: Exploiting the Semantic Gap in Trusted Execution Environments},
language = {eng},
author = {Aravind Machiry and Eric Gustafson and Chad Spensky and Christopher Salls and Nick Stephens and Ruoyu Wang and Antonio Bianchi and Yung Ryn Choe and Christopher Kr{\"u}gel and Giovanni Vigna},
}

@inproceedings{LentzMatthew2018SATM,
series = {MobiSys '18},
abstract = {Reliable on-off control of peripherals on smart devices is a key to security and privacy in many scenarios. Journalists want to reliably turn off radios to protect their sources during investigative reporting. Users wish to ensure cameras and microphones are reliably off during private meetings. In this paper, we present SeCloak, an ARM TrustZone-based solution that ensures reliable on-off control of peripherals even when the platform software is compromised. We design a secure kernel that co-exists with software running on mobile devices (e.g., Android and Linux) without requiring any code modifications. An Android prototype demonstrates that mobile peripherals like radios, cameras, and microphones can be controlled reliably with a very small trusted computing base and with minimal performance overhead.},
pages = {1--13},
publisher = {ACM},
booktitle = {MobiSys 2018 - Proceedings of the 16th ACM International Conference on Mobile Systems, Applications, and Services},
isbn = {9781450357203},
year = {2018},
title = {SeCloak: ARM Trustzone-based Mobile Peripheral Control},
copyright = {Copyright 2018 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Lentz, Matthew and Sen, Rijurekha and Druschel, Peter and Bhattacharjee, Bobby},
}

@article{EskandarianSaba2018FPUS,
abstract = {Users regularly enter sensitive data, such as passwords, credit card numbers, or tax information, into the browser window. While modern browsers provide powerful client-side privacy measures to protect this data, none of these defenses prevent a browser compromised by malware from stealing it. In this work, we present Fidelius, a new architecture that uses trusted hardware enclaves integrated into the browser to enable protection of user secrets during web browsing sessions, even if the entire underlying browser and OS are fully controlled by a malicious attacker. Fidelius solves many challenges involved in providing protection for browsers in a fully malicious environment, offering support for integrity and privacy for form data, JavaScript execution, XMLHttpRequests, and protected web storage, while minimizing the TCB. Moreover, interactions between the enclave and the browser, the keyboard, and the display all require new protocols, each with their own security considerations. Finally, Fidelius takes into account UI considerations to ensure a consistent and simple interface for both developers and users. As part of this project, we develop the first open source system that provides a trusted path from input and output peripherals to a hardware enclave with no reliance on additional hypervisor security assumptions. These components may be of independent interest and useful to future projects. We implement and evaluate Fidelius to measure its performance overhead, finding that Fidelius imposes acceptable overhead on page load and user interaction for secured pages and has no impact on pages and page components that do not use its enhanced security features.},
year = {2018},
title = {Fidelius: Protecting User Secrets from Compromised Browsers},
copyright = {http://arxiv.org/licenses/nonexclusive-distrib/1.0},
language = {eng},
author = {Eskandarian, Saba and Cogan, Jonathan and Birnbaum, Sawyer and Brandon, Peh Chang Wei and Franke, Dillon and Fraser, Forest and GarciaJr, Gaspar and Gong, Eric and Nguyen, Hung T and Sethi, Taresh K and Subbiah, Vishal and Backes, Michael and Pellegrino, Giancarlo and Boneh, Dan},
keywords = {Computer Science - Cryptography and Security},
}

@article{ChangRui2017Mapm,
issn = {1386-7857},
abstract = {With the rapid development of Internet of Things technology and the promotion of embedded devices’ computation performance, smart devices are probably open to security threats and attacks while connecting with rich and novel Internet. Attracting lots of attention in embedded system security community recently, Trusted Execution Environment (TEE), allows for the execution of arbitrary code within environments completely isolated from the rest of a system. However, existing memory protection methods in a TEE are inadequate. In general, the software-based formal methods are not practical and the hardware-based implementation approaches lack of theoretical proof. To address the memory isolation and protection problems in TEE, in this paper, we propose a practical memory integrity protection method on an ARM-based platform, called MIPE, to defend against security threats including kernel data attacks and direct memory access attacks. MIPE utilizes TrustZone technique to create a isolated execution environment, which can protect the sensitive code and data against attacks. To present the integrity protection strategies, we provide the design of MIPE using B method, which is a practical formal method. We also implement MIPE on the Xilinx Zynq ZC702 evaluation board. The evaluation results show that the automatic proof rate of machines using B method is about 78.32\%, and the proposed method is effective and feasible in terms of both load time and overhead.},
journal = {Cluster computing},
pages = {1075--1087},
volume = {20},
publisher = {Springer US},
number = {2},
year = {2017},
title = {MIPE: a practical memory integrity protection method in a trusted execution environment},
copyright = {Springer Science+Business Media New York 2017},
language = {eng},
address = {New York},
author = {Chang, Rui and Jiang, Liehui and Chen, Wenzhi and Xiang, Yang and Cheng, Yuxia and Alelaiwi, Abdulhameed},
keywords = {Analysis ; Article ; Automation ; B method ; Communities ; Computer Communication Networks ; Computer memory ; Computer Science ; Computer Science, Information Systems ; Computer Science, Theory & Methods ; Computer security ; Design analysis ; Design engineering ; Electronic devices ; Embedded systems ; Feasibility ; Formal method ; Hardware ; Integrity ; Internet of Things ; Memory ; Memory integrity protection ; Methods ; Operating Systems ; Processor Architectures ; Promotion ; Proving ; Science & Technology ; Technology ; Threat tree model ; Trusted execution environment ; TrustZone},
}

@inproceedings{FerraiuoloAndrew2017KUvt,
series = {SOSP '17},
abstract = {Intel SGX promises powerful security: an arbitrary number of user-mode enclaves protected against physical attacks and privileged software adversaries. However, to achieve this, Intel extended the x86 architecture with an isolation mechanism approaching the complexity of an OS microkernel, implemented by an inscrutable mix of silicon and microcode. While hardware-based security can offer performance and features that are difficult or impossible to achieve in pure software, hardware-only solutions are difficult to update, either to patch security flaws or introduce new features. Komodo illustrates an alternative approach to attested, on-demand, user-mode, concurrent isolated execution. We decouple the core hardware mechanisms such as memory encryption, address-space isolation and attestation from the management thereof, which Komodo delegates to a privileged software monitor that in turn implements enclaves. The monitor's correctness is ensured by a machine-checkable proof of both functional correctness and high-level security properties of enclave integrity and confidentiality. We show that the approach is practical and performant with a concrete implementation of a prototype in verified assembly code on ARM TrustZone. Our ultimate goal is to achieve security equivalent to or better than SGX while enabling deployment of new enclave features independently of CPU upgrades. The Komodo specification, prototype implementation, and proofs are available at https://github.com/Microsoft/Komodo.},
pages = {287--305},
publisher = {ACM},
booktitle = {Proceedings of the 26th Symposium on operating systems principles},
isbn = {9781450350853},
year = {2017},
title = {Komodo: Using verification to disentangle secure-enclave hardware from software},
copyright = {Copyright 2018 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Ferraiuolo, Andrew and Baumann, Andrew and Hawblitzel, Chris and Parno, Bryan},
}

@online{TrustZone,
  author = {{ARM Ltd.}},
  title = {{TrustZone} TrustZone for cortex-a},
  year = 2022,
  url = {https://www.arm.com/technologies/trustzone-for-cortex-a},
  urldate = {2022-04-26}
}

@online{KNOX,
  author = {{Samsung}},
  title = {{KNOX} Stay connected, protected, and productive},
  year = 2022,
  url = {https://www.samsungknox.com/en},
  urldate = {2022-04-26}
}

@online{KeyStore,
  author = {{Google}},
  title = {{Android} keystore system},
  year = 2022,
  url = {https://developer.android.com/training/articles/keystore},
  urldate = {2022-04-26}
}

@online{PineSoft,
  author = {{PINE64}},
  title = {{PinePhone} Software Releases},
  year = 2022,
  url = {https://wiki.pine64.org/wiki/PinePhone_Software_Releases},
  urldate = {2022-04-26}
}

@inproceedings{JasimKhalidFadhil2022AoEA,
issn = {2271-2097},
abstract = {This paper intended to investigate and analyze encryption algorithms that can be proposed to perform data security in 4G and 5G networks. The research explores different standards, services, and features presented via 4G and 5G networks. Also, the basic components of encryption algorithms (e.g., ZUC, SNOW 3G, and AES) are investigated. For instance, initialization keys have been identified and analyzed due to their vital roles in determining the security of the encryption algorithms. Moreover, the researchers analyzed the effective elements of these algorithms (i.e., LFSR registers, substitution boxes, NLF functions like finite state machines, Math transformations, secret encryption keys, and non-secret IV keys). Cryptanalysis methods play important roles in determining the security of these algorithms. Thus, some cryptanalysis methods have been explored and investigated. Various weak points have been identified in initialization process of these algorithms. Therefore, different recommendations are presented that enhance the security of these ciphers, and can be reflected in data security in 4G and 5G networks.},
pages = {01004},
volume = {42},
publisher = {EDP Sciences},
booktitle = {ITM web of conferences},
year = {2022},
title = {Analysis of Encryption Algorithms Proposed for Data Security in 4G and 5G Generations},
language = {eng},
author = {Jasim Khalid Fadhil and Ghafoor Kayhan Zrar and Maghdid Halgurd S},
}

@article{ZakiRanaM20214NSA,
issn = {1865-7923},
abstract = {Long Term Evolution (LTE) of (Universal Mobile Telecommunication System) is one of the modern steps in series of mobile telecommunications systems. That appears to be a strong technology that meets the requirements of fourth-generation (4G) mobile networks and supports authentication and encryption mechanisms between User Equipment (UE) and Message Management Entity (MME). This paper provides an overview of the three most important algorithms that are considered the heart of LTE cryptographic algorithms (SNOW3G, AES, and ZUC) and a comparison between cipher key length and initial vector length to generate keystream depending on the structure used for each algorithm as each algorithm has a time of complexity and space of complexity that differs from the other security algorithm.
 },
journal = {International journal of interactive mobile technologies},
pages = {127--143},
volume = {15},
publisher = {International Association of Online Engineering (IAOE)},
number = {16},
year = {2021},
title = {4G Network Security Algorithms: Overview},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Zaki, Rana M and Wahab, Hala Bahjat Abdul},
keywords = {AES ; authentication ; confidentiality ; cryptography ; LTE ; lte, cryptography, 4g, authentication, confidentiality, security, snow3g, aes, zuc ; security ; SNOW3G ; ZUC},
}

@article{FerragMohamedAmine2018Sf4a,
issn = {1084-8045},
abstract = {This paper presents a comprehensive survey of existing authentication and privacy-preserving schemes for 4G and 5G cellular networks. We start by providing an overview of existing surveys that deal with 4G and 5G cellular networks. Then, we give a classification of threat models in 4G and 5G cellular networks in four categories, including, attacks against privacy, attacks against integrity, attacks against availability, and attacks against authentication. We also provide a classification of countermeasures into three types of categories, including, cryptography methods, humans factors, and intrusion detection methods. The countermeasures and informal and formal security analysis techniques used by the authentication and privacy preserving schemes are summarized in form of tables. Based on the categorization of the authentication and privacy models, we classify these schemes in seven types, including, handover authentication with privacy, mutual authentication with privacy, RFID authentication with privacy, deniable authentication with privacy, authentication with mutual anonymity, authentication and key agreement with privacy, and three-factor authentication with privacy. In addition, we provide a taxonomy and comparison of authentication and privacy-preserving schemes for 4G and 5G cellular networks in form of tables. Based on the current survey, several recommendations for further research are discussed at the end of this paper.},
journal = {Journal of network and computer applications},
pages = {55--82},
volume = {101},
publisher = {Elsevier Ltd},
year = {2018},
title = {Security for 4G and 5G cellular networks: A survey of existing authentication and privacy-preserving schemes},
copyright = {2017 Elsevier Ltd},
language = {eng},
address = {LONDON},
author = {Ferrag, Mohamed Amine and Maglaras, Leandros and Argyriou, Antonios and Kosmanos, Dimitrios and Janicke, Helge},
keywords = {5G mobile communication ; Authentication ; Computer Science ; Computer Science, Hardware & Architecture ; Computer Science, Interdisciplinary Applications ; Computer Science, Software Engineering ; Cryptography ; Investment analysis ; Mobile communication systems ; Privacy ; Safety and security measures ; Science & Technology ; Security ; Technology ; Wireless communication systems},
}

@article{SetyawanRico2020Abro,
issn = {1757-8981},
abstract = {The increasing number of smartphone users will encourage competition among smartphone manufacturers in innovating and marketing their products. Such competition can create open space for attackers to understand how smartphones work and then spread threats through malicious programs. In this study, a brief review of various threats and mitigations is carried out on smartphones infrastructure, especially on several well-known brand smartphones.},
journal = {IOP Conference Series: Materials Science and Engineering},
pages = {12141},
volume = {852},
publisher = {IOP Publishing},
number = {1},
year = {2020},
title = {A brief review of attacks and mitigations on smartphone infrastructure},
copyright = {Published under licence by IOP Publishing Ltd},
language = {eng},
address = {Bristol},
author = {Setyawan, Rico and Rahayu, Allicia A and Nur Annisa, K. F and Amiruddin, Amiruddin},
keywords = {Competition ; Infrastructure ; Smartphones},
}

@article{JavedAbdulRehman2020Adms,
issn = {1868-5137},
abstract = {Due to the advancement in technologies and excessive usability of smartphones in various domains (e.g., mobile banking), smartphones became more prone to malicious attacks.Typing on the soft keyboard of a smartphone produces different vibrations, which can be abused to recognize the keys being pressed, hence, facilitating side-channel attacks. In this work, we develop and evaluate AlphaLogger- an Android-based application that infers the alphabet keys being typed on a soft keyboard. AlphaLogger runs in the background and collects data at a frequency of 10Hz/sec from the smartphone hardware sensors (accelerometer, gyroscope and magnetometer) to accurately infer the keystrokes being typed on the soft keyboard of all other applications running in the foreground. We show a performance analysis of the different combinations of sensors. A thorough evaluation demonstrates that keystrokes can be inferred with an accuracy of 90.2\% using accelerometer, gyroscope, and magnetometer.},
journal = {Journal of ambient intelligence and humanized computing},
publisher = {SPRINGER HEIDELBERG},
year = {2020},
title = {AlphaLogger: detecting motion-based side-channel attack using smartphone keystrokes},
copyright = {Copyright 2020 Elsevier B.V., All rights reserved.},
language = {eng},
address = {HEIDELBERG},
author = {Javed, Abdul Rehman and Beg, Mirza Omer and Asim, Muhammad and Baker, Thar and Al-Bayatti, Ali Hilal},
keywords = {Artificial Intelligence ; Computer Science ; Computer Science, Artificial Intelligence ; Computer Science, Information Systems ; Distributed Computing ; Image Processing ; Keystroke inference ; Machine learning ; Motion sensor ; Science & Technology ; Side-channel attacks ; Smartphone security ; Technology ; Telecommunications},
}

@incollection{PotharajuRahul2012PSAA,
series = {Lecture Notes in Computer Science},
issn = {0302-9743},
abstract = {In this paper, we show how an attacker can launch malware onto a large number of smartphone users by plagiarizing Android applications and by using elements of social engineering to increase infection rate. Our analysis of a dataset of 158,000 smartphone applications meta-information indicates that 29.4\% of the applications are more likely to be plagiarized. We propose three detection schemes that rely on syntactic fingerprinting to detect plagiarized applications under different levels of obfuscation used by the attacker. Our analysis of 7,600 smartphone application binaries shows that our schemes detect all instances of plagiarism from a set of real-world malware incidents with 0.5\% false positives and scale to millions of applications using only commodity servers.},
pages = {106--120},
volume = {7159},
publisher = {Springer Berlin Heidelberg},
booktitle = {Engineering Secure Software and Systems},
isbn = {9783642281655},
year = {2012},
title = {Plagiarizing Smartphone Applications: Attack Strategies and Defense Techniques},
copyright = {Springer-Verlag Berlin Heidelberg 2012},
language = {eng},
address = {Berlin, Heidelberg},
author = {Potharaju, Rahul and Newell, Andrew and Nita-Rotaru, Cristina and Zhang, Xiangyu},
keywords = {Abstract Syntax ; Android Application ; Clone Detection ; Feature Vector ; Malicious Code},
}

@inproceedings{LuYu-Han2020Gcfo,
series = {MobiCom '20},
abstract = {IMS (IP Multimedia Subsystem) is an essential framework for providing 4G/5G multimedia services. It has been deployed worldwide to support two call services: VoLTE (Voice over LTE) and VoWi-Fi (Voice over Wi-Fi). VoWi-Fi enables telephony calls over the Wi-Fi network to complement VoLTE. In this work, we uncover that the VoWi-Fi signaling session can be hijacked to maliciously manipulate the IMS call operation. An adversary can easily make ghost calls to launch a stealthy call DoS (Denial of Service) attack against specific cellular users. Only phone numbers, but not any malware or network information, are required from the victims. This sophisticated attack harnesses a design defect of the IMS call state machine, but not simply flooding or a crash trigger. To stealthily detect attackable phones at run time, we exploit a vulnerability of the 4G network infrastructure, call information leakage, which we explore using machine learning. We validate these vulnerabilities in operational 4G networks of 4 top-tier carriers across Asia and North America countries with 7 phone brands. Our result shows that the call DoS attack can prevent the victims from receiving incoming calls up to 99.0\% time without user awareness. We finally propose and evaluate recommended solutions.},
pages = {1--14},
publisher = {ACM},
booktitle = {Proceedings of the 26th Annual International Conference on mobile computing and networking},
isbn = {9781450370851},
year = {2020},
title = {Ghost calls from operational 4G call systems: IMS vulnerability, call DoS attack, and countermeasure},
copyright = {Copyright 2020 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Lu, Yu-Han and Li, Chi-Yu and Li, Yao-Yu and Hsiao, Sandy and Xie, Tian and Tu, Guan-Hua and Chen, Wei-Xun},
keywords = {Application layer protocols ; Denial-of-service attacks ; Mobile and wireless security ; Networks ; Security and privacy},
}

@inproceedings{FangKaiming2020Psaa,
series = {WiSec '20},
abstract = {Although the impact of mobile botnet attacks against cellular networks has been studied in a number of previous works, little attention has been paid to regional botnets, where bot-infected mobile devices are geographically concentrated at local areas. In this work we investigate a new type of threats called paging storm attacks , which can be launched from a regional botnet to exhaust the limited paging capacity of cells in a 4G/LTE (Long-Term Evolution) network. As paging storm attacks can delay paging requests for legitimate time-critical voice or video calls in a target area, their real-life implications include user annoyance, distortion of call center analytics, and loss of productivity. To demonstrate the feasibility of such attacks, we design and implement a proof-of-concept Android botnet that can coordinate bot activities to create pulsating paging requests within a short period of time. We mathematically analyze the probability that normal paging requests are delayed due to a botnet attack. Experimental results observed from a high-fidelity emulation testbed reveal that paging storm attacks launched from a regional botnet can create repetitive surges of paging requests in the target LTE network, thereby delaying time-critical voice/video calls by several seconds.},
pages = {295--305},
publisher = {ACM},
booktitle = {Proceedings of the 13th ACM Conference on security and privacy in wireless and mobile networks},
isbn = {9781450380065},
year = {2020},
title = {Paging storm attacks against 4G/LTE networks from regional Android botnets: rationale, practicality, and implications},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Fang, Kaiming and Yan, Guanhua},
keywords = {4G/LTE networks ; Android ; mobile botnets ; paging storm attacks},
}

@article{AntonioliDaniele2020KNDA,
issn = {2471-2566},
abstract = {Bluetooth (BR/EDR) and Bluetooth Low Energy (BLE) are pervasive wireless technologies specified in the Bluetooth standard. The standard includes key negotiation protocols used to generate long-term keys (during pairing) and session keys (during secure connection establishment). In this work, we demonstrate that the key negotiation protocols of Bluetooth and BLE are vulnerable to standard-compliant entropy downgrade attacks. In particular, we show how an attacker can downgrade the entropy of any Bluetooth session key to 1 byte, and of any BLE long-term key and session key to 7 bytes. Such low entropy values enable the attacker to brute-force Bluetooth long-term keys and BLE long-term and session keys, and to break all the security guarantees promised by Bluetooth and BLE. As a result of our attacks, an attacker can decrypt all the ciphertext and inject valid ciphertext in any Bluetooth and BLE network.
Our key negotiation downgrade attacks are conducted remotely, do not require access to the victims' devices, and are stealthy to the victims. As the attacks are standard-compliant, they are effective regardless of the usage of the strongest Bluetooth and BLE security modes (including Secure Connections), the Bluetooth version, and the implementation details of the devices used by the victims. We successfully attack 38 Bluetooth devices (32 unique Bluetooth chips) and 19 BLE devices from different vendors, using all the major versions of the Bluetooth standard. Finally, we present effective legacy compliant and non-legacy compliant countermeasures to mitigate our key negotiation downgrade attacks.},
journal = {ACM transactions on privacy and security},
pages = {1--28},
volume = {23},
publisher = {ACM},
number = {3},
year = {2020},
title = {Key Negotiation Downgrade Attacks on Bluetooth and Bluetooth Low Energy},
copyright = {Copyright 2020 Elsevier B.V., All rights reserved.},
language = {eng},
address = {NEW YORK},
author = {Antonioli, Daniele and Tippenhauer, Nils and Rasmussen, Kasper},
keywords = {BLE ; bluetooth ; Computer Science ; Computer Science, Information Systems ; downgrade attack ; Fisheries ; key negotiation ; KNOB attack ; Life Sciences & Biomedicine ; Science & Technology ; Security ; Technology},
}

@inproceedings{PatelNishitkumar2021IBVt,
abstract = {Bluetooth devices can be compromised in various ways, which can lead to significant loss of data. In most cases hackers opt for denial service attacks, eavesdropping, resource misappropriation, and message modification. All these bear significant threats in terms of tampering with user data. In the evaluation, this paper used the Kali Linux platform and third-party system tools to test four Bluetooth compromise processes (Bluejacking, bluesmacking, bluesnarfing, and social engineering) on three different Bluetooth devices (HMDX Jam speaker, iPhone 6, and Nexus 7. The results revealed that hackers can execute the attacks without much effort and consequently tamper with information within the system. This paper also investigated how users could implement various protocols to secure their devices to limit the possibility of incurring intrusions from hackers.},
pages = {549--554},
publisher = {IEEE},
booktitle = {2021 5th International Symposium on Multidisciplinary Studies and Innovative Technologies (ISMSIT)},
isbn = {9781665449304},
year = {2021},
title = {Investigating Bluetooth Vulnerabilities to Defend from Attacks},
copyright = {Copyright 2022 Elsevier B.V., All rights reserved.},
language = {eng},
address = {Piscataway},
author = {Patel, Nishitkumar and Wimmer, Hayden and Rebman, Carl M},
keywords = {Audio equipment ; Bluejacking ; bluesmacking ; bluesnarfing ; Bluetooth ; Bluetooth attacks ; Computer hacking ; Eavesdropping ; Linux ; Multidisciplinary research ; Optimized production technology ; Protocols ; Smartphones ; social engineering ; Tools ; Usability ; vulnerabilities},
}

@inproceedings{CayreRomain2021CaWa,
abstract = {In this paper, we focus on a new type of wireless attacks, named cross-technology pivoting attacks. The main objective of these attacks is to divert the transceivers of compromised devices dedicated to a given protocol to allow them to communicate through another protocol, taking advantage of some similarities in their modulation schemes. The main contribution of this work consists in demonstrating the practical feasibility of pivoting attacks from off-the-shelf devices implementing the Bluetooth 5.0 specification. To our knowledge, this attack has not been explored so far in the state of the art.},
pages = {386--388},
booktitle = {WiSec 2021 - Proceedings of the 14th ACM Conference on Security and Privacy in Wireless and Mobile Networks},
isbn = {9781450383493},
year = {2021},
title = {Cross-protocol attacks: Weaponizing a smartphone by diverting its bluetooth controller},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Cayre, Romain and Marconato, Géraldine and Galtier, Florent and Kaâniche, Mohamed and Nicomette, Vincent and Auriol, Guillaume},
keywords = {Computer Science ; Cryptography and Security ; Signal and Image Processing},
}

@inproceedings{ClaverieTristan2021BRoB,
abstract = {This paper systematically analyzes the security of pairing and provisioning protocols in Bluetooth specifications. More precisely, we show that reflection attacks are possible against various pairing modes of BLE and Bluetooth Classic. Furthermore, we uncover several vulnerabilities in Bluetooth Mesh provisioning, ranging from reflection attacks to cryptographic weaknesses. Each vulnerability is explained in detail, exploitation conditions and impacts on communication security are given. Exploitation scenarios are provided and validated by practical experiments on several devices. Overall, we show that there are protocol flaws in all Pairing modes and in the Mesh Provisioning. Those were reported to the Bluetooth SIG which assigned six CVEs. Impacts discovered range from impersonation to complete Machine in the Middle attacks between devices on the version 5.2 of the Bluetooth specification.},
pages = {339--351},
publisher = {IEEE},
booktitle = {2021 IEEE Security and Privacy Workshops (SPW)},
isbn = {1728189349},
year = {2021},
title = {BlueMirror: Reflections on Bluetooth Pairing and Provisioning Protocols},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Claverie, Tristan and Esteves, Jose Lopes},
keywords = {Bluetooth ; Mesh networks ; Performance evaluation ; Privacy ; protocol analysis ; Protocols ; Reflection ; security ; User experience},
}

@incollection{KumarSudesh2020AoAS,
series = {Lecture Notes in Computer Science},
issn = {0302-9743},
abstract = {Smartphones are ubiquitous today, and they contain a large amount of personal and sensitive information. It is, therefore, essential to secure the underlying operating system. Android is the dominant operating system among the smartphone market; therefore, it is critical to uphold the security standards of Android. Android smartphone manufacturers and third-party custom ROM developers modify the operating system heavily to differentiate themselves among the competitors. The modifications done by the Smartphone manufacturers and third-party custom ROM developers posses a threat to the smartphone user’s privacy and make the Android OS vulnerable to advanced persistent threat (APT) attacks. This paper demonstrates that Smartphone manufacturers and third-party custom ROM developers can bypass Android’s security mechanisms and breach the user’s privacy without getting detected by the user by modifying parts of Android OS except for the kernel. In particular, this paper shows methods by which APT attacks can be performed on the Android 10’s Camera subsystem to capture pictures from the camera and upload them to a remote server without the user’s knowledge.},
pages = {241--252},
volume = {12553},
publisher = {Springer International Publishing},
booktitle = {Information Systems Security},
isbn = {3030656098},
year = {2020},
title = {Attacks on Android-Based Smartphones and Impact of Vendor Customization on Android OS Security},
copyright = {These electronic books are licensed by OhioLINK and may be under copyright protection. Please see the Acceptable Use Guidelines for more information, or contact your librarian.},
language = {eng},
address = {Cham},
author = {Kumar, Sudesh and Kittur, Lakshmi Jayant and Pais, Alwyn Roshan},
keywords = {Advanced persistent threat ; Android 10 ; Android security ; AOSP ; Backdoor ; Camera ; Custom ROM developer ; OEMs ; Operating system ; Privacy ; Smartphone manufacturers},
}

@misc{GRAVELLIERJoseph2021RHAo,
abstract = {In this thesis we evaluate software-based hardware attacks, a novel attack family that targets connected devices such as IoT products, smartphones or cloud datacenters. These attacks take advantage of hardware resources that can be directly accessed from software in complex integrated circuits and use them to conduct fault injection and side-channel analysis exploits. Because they are triggered by software code, they can be launched remotely and on multiple victim devices regardless of their physical location. Through the evaluation of software-based hardware attacks we aim at assessing the level of threat they pose to connected devices security. The challenge is considerable since any connected device is potentially endangered.Through our experiments, we discovered generic attack vectors widely implemented in recent SoCs that could enable remote hardware attacks. We conducted FPGA-to-FPGA and FPGA-to-CPU attacks and demonstrated that remote power analysis was feasible. These new attack paths represent a serious threat for FPGA-based systems especially when applied to cloud FPGAs and heterogeneous SoCs. Then, we went further by proving that delay-line components, widely implemented in high-end SoCs, could be used for conducting fault injection and side-channel attacks. We built various scenarios such as CPU-to-MCU attacks on complex operating systems and demonstrated that software-based hardware attacks could successfully break the logical isolation between processes and lead to the extraction of sensitive information. Our research works describe the methodology adopted to build and conduct the attacks along with countermeasure proposals to mitigate their impact.
Cette thèse propose d’étudier ces nouveaux chemins d’attaque qui exploitent des vulnérabilités physiques à distance. Plus précisément elle s’intéresse à celles qui utilisent du logiciel comme vecteur d’attaque matérielle. Il peut s’agir par exemple d’un programme malveillant envoyé à des dizaines, voire des milliers d’appareils connectés. Une fois actif, il identifie des ressources matérielles présentes dans les systèmes ciblés (capteurs, régulateurs) et les détourne de leur rôle initial afin de mener des attaques matérielles. À l’instar d’attaques reconnues telles que Rowhammer, CLKSCREW ou Platypus, les travaux réalisés durant ces trois années de recherche contribuent à mettre en avant le danger potentiel des attaques matérielles à distance. Cette thèse contient des résultats variés allant de l’analyse de consommation sur FPGA à de l’injection de faute sur processeurs complexes. Elle décrit la menace potentielle des attaques matérielles à distance, notamment au regard de l’adoption d’entités de sécurité intégrées dans les processeurs complexes et de l’accroissement des services connectés en général (IoT, Cloud). Toutes ces études ont été menées de façon à être reproductibles et réalisables à distance. Elles visent à préparer les différents acteurs de la sécurisation des objets connectés à cette menace naissante et ainsi éviter sa mise en exécution future sur des milliers d’appareils à travers le monde.},
year = {2021},
title = {Remote Hardware Attacks on Connected Devices},
copyright = {Distributed under a Creative Commons Attribution 4.0 International License},
language = {eng},
author = {GRAVELLIER, Joseph},
keywords = {Computer Science ; Cryptography and Security},
}

@article{ZhuYe2021TSOS,
issn = {1545-5971},
abstract = {Smartphone reconnaissance, the first step to launch security attacks to a target smartphone, enables an adversary to tailor attacks by exploiting the known vulnerabilities of the target system. In this paper we investigate smartphone OS identification with encrypted traffic. We propose four algorithms to do that, which are based on the spectral analysis of the encrypted traffic. The algorithms are designed for high identification accuracy by removing noise frequency components and for high efficiency in terms of computation complexity. We evaluate the identification algorithms with smartphone traffic collected over three months. The experiment results show that the algorithms can identify the smartphone OS accurately. The identification accuracy can reach 100\% with only 30 seconds of smartphone traffic.},
journal = {IEEE transactions on dependable and secure computing},
pages = {411--425},
volume = {18},
publisher = {IEEE},
number = {1},
year = {2021},
title = {Towards Smartphone Operating System Identification},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
address = {LOS ALAMITOS},
author = {Zhu, Ye and Ruffing, Nicholas and Gurary, Jonathan and Guan, Yong and Bettati, Riccardo},
keywords = {Algorithms ; Computer Science ; Computer Science, Hardware & Architecture ; Computer Science, Information Systems ; Computer Science, Software Engineering ; Cryptography ; Frequency-domain analysis ; identification ; Observers ; Reconnaissance ; Science & Technology ; Smartphones ; Spectrum analysis ; Streaming media ; System identification ; TCPIP ; Technology ; Timing ; Witnesses},
}

@article{SongWenna2020ADAv,
issn = {2169-3536},
abstract = {To avoid the inconvenience of retyping a user's ID and password, most mobile apps now provide the automatic login feature for a better user experience. To this end, auto-login credential is stored locally on the smartphone. However, such sensitive credential can be stolen by attackers and placed into their smartphones via the well-known credential-clone attack. Then, attackers can imperceptibly log into the victim's account, which causes more devastating and covert losses than merely intercepting the user's password. In this article, we propose a generalized Android credential-clone attack, called data-clone attack. By exploiting the new-found vulnerabilities of original equipment manufacturer (OEM)-made phone clone apps, we design an identity theft method that overcomes the problem of incomplete credential extraction and eliminates the requirement of root authority. To evade the consistency check of device-specific attributes in apps, we design two environment customization methods for app-level and operating system (OS)-level, respectively. Especially, we develop a transparent Android OS customization solution, named CloneDroid, which simulates 101 special attributes of Android OS. We implement a prototype of CloneDroid and the experimental results show that 172 out of 175 most-downloaded apps' accounts can be jeopardized, such as Facebook and WeChat. Moreover, our study has identified 18 confirmed zero-day vulnerabilities. Our findings paint a cautionary tale for the security community that billions of accounts are potentially exposed to Android OS customization-assisted data-clone attacks.},
journal = {IEEE access},
pages = {199733--199746},
volume = {8},
publisher = {IEEE},
year = {2020},
title = {Android Data-Clone Attack via Operating System Customization},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
address = {PISCATAWAY},
author = {Song, Wenna and Jiang, Ming and Yan, Han and Xiang, Yi and Chen, Yuan and Luo, Yuan and He, Kun and Peng, Guojun},
keywords = {Automatic login ; Cloning ; Computer Science ; Computer Science, Information Systems ; Data-clone attack ; Engineering ; Engineering, Electrical & Electronic ; Identity theft ; Operating systems ; OS customization ; Password ; Science & Technology ; Smart phones ; Social networking (online) ; Systematics ; Technology ; Telecommunications ; User experience},
}

@article{HuaZhichao2021Tpcf,
issn = {1674-733X},
abstract = {Containers are widely deployed on cloud platforms because of their low resource footprint, fast start-up time, and high performance, especially compared with its counterpart virtual machines. However, the Achilles’ heel of container technology is its weak isolation. For an attacker, jailbreaking into a host OS from a container is relatively easier than attacking a hypervisor from a virtual machine, because of its notably larger attack surface and larger trusted computing base (TCB). Researchers have proposed various solutions to protect applications from untrusted OS; yet, few of them focus on protecting containers, especially those hosting multiple applications and shared by multiple users. In this paper, we first identify several new attacks that cannot be prevented using the existing solutions. Furthermore, we systematically analyze the security properties that should be maintained to defend against these attacks and protect a full-fledged container from a malicious host OS. We then present the TZ-Container, a TrustZone-based secure container mechanism that can keep all these security properties. The TZ-Container specifically leverages TrustZone to construct multiple isolated execution environments (IEEs). Each IEE has a memory space isolated from the underlying OS and any other processes. By interposing switching between the user and the kernel modes, IEEs enforce security checks on each system call according to its semantics. We have implemented TZ-Container on the Hikey development board ensuring that it can support running unmodified Docker images downloaded from existing repositories such as
https://hub.docker.com/
. The evaluation results demonstrate that the TZ-Container has a performance overhead of approximately 5\%.},
journal = {Science China. Information sciences},
volume = {64},
publisher = {Science China Press},
number = {9},
year = {2021},
title = {TZ-Container: protecting container from untrusted OS with ARM TrustZone},
copyright = {Science China Press and Springer-Verlag GmbH Germany, part of Springer Nature 2021},
language = {eng},
address = {Beijing},
author = {Hua, Zhichao and Yu, Yang and Gu, Jinyu and Xia, Yubin and Chen, Haibo and Zang, Binyu},
keywords = {Analysis ; ARM ; ARM TrustZone ; Cloud computing ; Computer Science ; Computer Science, Information Systems ; Containers ; Engineering ; Engineering, Electrical & Electronic ; Information Systems and Communication Service ; Linux container ; Operating systems ; Research Paper ; Science & Technology ; Security ; Semantics ; system security ; system software ; Technology ; Virtual computer systems ; Virtual environments},
}

@inproceedings{AmacherJulien2019Otpo,
series = {Distributed Applications and Interoperable Systems},
issn = {0302-9743},
abstract = {International audience; The TrustZone technology, available in the vast majority of recent Arm processors, allows the execution of code inside a so-called secure world. It effectively provides hardware-isolated areas of the processor for sensitive data and code, i.e., a trusted execution environment (TEE). The Op-Tee framework provides a collection of toolchain, open-source libraries and secure kernel specifically geared to develop applications for TrustZone. This paper presents an in-depth performance- and energy-wise study of TrustZone using the Op-Tee framework, including secure storage and the cost of switching between secure and unsecure worlds, using emulated and hardware measurements.},
pages = {133--151},
volume = {11534},
publisher = {Springer International Publishing},
booktitle = {Lecture Notes in Computer Science},
isbn = {3030224953},
year = {2019},
title = {On the performance of ARM trustzone: (Practical experience report)},
copyright = {Copyright 2019 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Amacher, Julien and Schiavoni, Valerio},
keywords = {ARM ; Benchmarks ; Computer Science ; Internet Architecture ; Networking ; Networking and Internet Architecture ; Operating Systems ; Performance ; Trusted Execution Environment ; TrustZone},
}

@online{QEMU,
  author = {{OP-TEE}},
  title = {{OP-TEE} QEMU v8},
  year = 2022,
  url = {https://optee.readthedocs.io/en/latest/building/devices/qemu.html#qemu-v8},
  urldate = {2022-04-29}
}

@online{mobian,
  author = {{Linux community}},
  title = {{Mobian} sunxi64-linux},
  year = 2022,
  url = {https://gitlab.com/mobian1/devices/sunxi64-linux},
  urldate = {2022-04-29}
}

@online{u-boot,
  author = {{DENX Software Engineering}},
  title = {{Pine64} U-Boot},
  year = 2022,
  url = {https://gitlab.com/pine64-org/u-boot},
  urldate = {2022-04-29}
}

@online{ARMfirmware,
  author = {{ARM-Software}},
  title = {{ARM Software} arm trusted firmware},
  year = 2022,
  url = {https://github.com/ARM-software/arm-trusted-firmware/},
  urldate = {2022-04-29}
}

@online{OPTEEgit,
  author = {{OP-TEE}},
  title = {{OP-TEE} optee\_os, optee\_client},
  year = 2022,
  url = {https://github.com/OP-TEE/},
  urldate = {2022-04-29}
}

@article{GrossMathieu2021BTmi,
issn = {2190-8508},
abstract = {FPGA-SoCs are heterogeneous embedded computing platforms consisting of reconfigurable hardware and high-performance processing units. This combination offers flexibility and good performance for the design of embedded systems. However, allowing the sharing of resources between an FPGA and an embedded CPU enables possible attacks from one system on the other. This work demonstrates that a malicious hardware block contained inside the reconfigurable logic can manipulate the memory and peripherals of the CPU. Previous works have already considered direct memory access attacks from malicious logic on platforms containing no memory isolation mechanism. In this work, such attacks are investigated on a modern platform which contains state-of-the-art memory and peripherals isolation mechanisms. We demonstrate two attacks capable of compromising a Trusted Execution Environment based on ARM TrustZone and show a new attack capable of bypassing the secure boot configuration set by a device owner via the manipulation of Battery-Backed RAM and eFuses from malicious logic.},
journal = {Journal of cryptographic engineering},
publisher = {SPRINGER HEIDELBERG},
year = {2021},
title = {Breaking TrustZone memory isolation and secure boot through malicious hardware on a modern FPGA-SoC},
copyright = {Copyright 2021 Elsevier B.V., All rights reserved.},
language = {eng},
address = {HEIDELBERG},
author = {Gross, Mathieu and Jacob, Nisha and Zankl, Andreas and Sigl, Georg},
keywords = {Computer Science ; Computer Science, Theory & Methods ; DMA attack ; FPGA-SoCs ; Hardware trojan ; Memory and peripherals isolation ; Science & Technology ; Secure boot ; Technology ; Trusted execution environment},
}

@inproceedings{RyanKeegan2019HHEE,
series = {CCS '19},
issn = {1543-7221},
abstract = {Trusted Execution Environments (TEEs) such as ARM TrustZone are in widespread use in both mobile and embedded devices, and they are used to protect sensitive secrets while often sharing the same computational hardware as untrusted code. Although there has been limited research in the area, the threat of microarchitectural attacks against ARM TrustZone has not been thoroughly studied. This is not the case for other TEEs, such as Intel SGX, where the security promises of the TEE have been violated numerous times by the academic community, showing that it is possible to use side-channel attacks to gain detailed insight into the microarchitectural behavior of trusted code. In this work, we show that TrustZone is susceptible to similar attacks, and we demonstrate the ability to achieve cache attacks with high temporal precision, high spatial precision, and low noise. These tools make it easy to monitor the data flow and code flow of TrustZone code with great resolution, and we apply our techniques to investigate the security of a real-world application. We examine ECDSA signing in Qualcomm's implementation of Android's hardware-backed keystore and identify a series of vulnerabilities that leak sensitive cryptographic information through shared microarchitectural structures. By using the powerful attacks developed in this paper, we are able to successfully extract this sensitive information and fully recover a 256-bit private key from Qualcomm's version of the hardware-backed keystore.},
pages = {181--194},
publisher = {ACM},
booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on computer and communications security},
isbn = {9781450367479},
year = {2019},
title = {Hardware-Backed Heist: Extracting ECDSA Keys from Qualcomm's TrustZone},
copyright = {Copyright 2019 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Ryan, Keegan},
keywords = {Cache attacks ; Key extraction ; Side-channel attacks ; Trusted execution environments ; TrustZone},
}

@inproceedings{BukasaSebanjilaKevin2018HTCB,
series = {Lecture Notes in Computer Science},
issn = {0302-9743},
abstract = {Side-channel attacks (SCA) exploit the reification of a computation through its physical dimensions (current consumption, EM emission, ...). Focusing on Electromagnetic analyses (EMA), such analyses have mostly been considered on low-end devices: smartcards and microcontrollers. In the wake of recent works, we propose to analyze the effects of a modern microarchitecture on the efficiency of EMA (here Correlation Power Analysis and template attacks). We show that despite the difficulty to synchronize the measurements, the speed of the targeted core and the activity of other cores on the same chip can still be accommodated. Finally, we confirm that enabling the secure mode of TrustZone (a hardware-assisted software countermeasure) has no effect whatsoever on the EMA efficiency. Therefore, critical applications in TrustZone are not more secure than in the normal world with respect to EMA, in accordance with the fact that it is not a countermeasure against physical attacks. For the best of our knowledge this is the first application of EMA against TrustZone.},
pages = {93--109},
volume = {10741},
publisher = {Springer International Publishing},
booktitle = {Information Security Theory and Practice},
isbn = {9783319935232},
year = {2018},
title = {How TrustZone Could Be Bypassed: Side-Channel Attacks on a Modern System-on-Chip},
copyright = {IFIP International Federation for Information Processing 2018},
language = {eng},
address = {Cham},
author = {Bukasa, Sebanjila Kevin and Lashermes, Ronan and Le Bouder, Hélène and Lanet, Jean-Louis and Legay, Axel},
keywords = {ARM TrustZone ; Channel Analysis (SCA) ; Computer Science ; Raspberry Pi 2 ; Side ; Side-Channel Analysis (SCA)},
}

@inproceedings{GuanLe2017TSEo,
series = {MobiSys '17},
abstract = {The rapid evolution of Internet-of-Things (IoT) technologies has led to an emerging need to make them smarter. A variety of applications now run simultaneously on an ARM-based processor. For example, devices on the edge of the Internet are provided with higher horsepower to be entrusted with storing, processing and analyzing data collected from IoT devices. This significantly improves efficiency and reduces the amount of data that needs to be transported to the cloud for data processing, analysis and storage. However, commodity OSes are prone to compromise. Once they are exploited, attackers can access the data on these devices. Since the data stored and processed on the devices can be sensitive, left untackled, this is particularly disconcerting. In this paper, we propose a new system, TrustShadow that shields legacy applications from untrusted OSes. TrustShadow takes advantage of ARM TrustZone technology and partitions resources into the secure and normal worlds. In the secure world, TrustShadow constructs a trusted execution environment for security-critical applications. This trusted environment is maintained by a lightweight runtime system that coordinates the communication between applications and the ordinary OS running in the normal world. The runtime system does not provide system services itself. Rather, it forwards requests for system services to the ordinary OS, and verifies the correctness of the responses. To demonstrate the efficiency of this design, we prototyped TrustShadow on a real chip board with ARM TrustZone support, and evaluated its performance using both microbenchmarks and real-world applications. We showed TrustShadow introduces only negligible overhead to real-world applications.},
pages = {488--501},
publisher = {ACM},
booktitle = {MobiSys 2017 - Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services},
isbn = {1450349285},
year = {2017},
title = {TrustShadow: Secure Execution of Unmodified Applications with ARM TrustZone},
copyright = {Copyright 2017 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Guan, Le and Liu, Peng and Xing, Xinyu and Ge, Xinyang and Zhang, Shengzhi and Yu, Meng and Jaeger, Trent},
keywords = {ARM TrustZone ; Computer Science ; Cryptography ; IoT ; Malicious operating systems ; Operating Systems ; Security ; Trusted execution},
}

@incollection{SalmanAmmarS2021SMSG,
series = {Lecture Notes in Networks and Systems},
issn = {2367-3370},
abstract = {Mobile phone devices constantly face new vulnerabilities for attackers to exploit. Many vulnerabilities allow attackers to gain full control over the operating system and thus putting security critical operations at risk. Mobile payment systems are gaining more traction and security countermeasures cannot rely on operating systems for protection. ARM TrustZone provides hardware-based security which is often used to protect key operations. In this work, we extended TrustZone functionality to offer robust security measures for specific I/O peripherals, namely, camera and location, to any application on demand. The work mainly ensures integrity of data retrieved by the peripherals. Applications that can utilize this functionality include merchant-presented QR payment systems, location attestation for payments and other applications. The work is designed to offer seamless integration for application developers, and transparency to end users. We demonstrated functionality on custom and modified existing applications. The added overhead is within expected margins. The work provides a feasible design for industrial implementations, where the vendors installed services do not need coordination with potential application developers, and that offers flexibility for both vendors and developers.},
pages = {868--884},
volume = {285},
publisher = {Springer International Publishing},
booktitle = {Intelligent Computing},
isbn = {9783030801281},
year = {2021},
title = {Securing Mobile Systems GPS and Camera Functions Using TrustZone Framework},
copyright = {These electronic books are licensed by OhioLINK and may be under copyright protection. Please see the Acceptable Use Guidelines for more information, or contact your librarian.},
language = {eng},
address = {Cham},
author = {Salman, Ammar S and Du, Wenliang (Kevin)},
keywords = {Android ; ARM TrustZone ; Attack surface ; GPS ; Mobile security ; OP-TEE ; QR payments ; REE ; Threat model ; TruZ-Droid},
}

@article{BenYehudaRaz2019Pare,
issn = {1615-5262},
abstract = {With the advent of the mobile industry, we face new security challenges. ARM architecture is deployed in most mobile phones, homeland security, IoT, autonomous cars and other industries, providing a hypervisor API (via virtualization extension technology). To research the applicability of this virtualization technology for security in this platform is an interesting endeavor. The hypervisor API is an addition available for some ARMv7-a and is available with any ARMv8-a processor. Some ARM platforms also offer TrustZone, which is a separate exception level designed for trusted computing. However, TrustZone may not be available to engineers as some vendors lock it. We present a method of applying a thin hypervisor technology as a generic security solution for the most common operating system on the ARM architecture. Furthermore, we discuss implementation alternatives and differences, especially in comparison with the Intel architecture and hypervisor with TrustZone approaches. We provide performance benchmarks for using hypervisors for reverse engineering protection.},
journal = {International journal of information security},
pages = {39--51},
volume = {19},
publisher = {Springer Berlin Heidelberg},
number = {1},
year = {2019},
title = {Protection against reverse engineering in ARM},
copyright = {Springer-Verlag GmbH Germany, part of Springer Nature 2019},
language = {eng},
address = {Berlin/Heidelberg},
author = {Ben Yehuda, Raz and Zaidenberg, Nezer Jacob},
keywords = {ARM ; Coding and Information Theory ; Communications Engineering ; Communications industry ; Computer Communication Networks ; Computer Science ; Computer Science, Information Systems ; Computer Science, Software Engineering ; Computer Science, Theory & Methods ; Cryptology ; Driverless cars ; Hypervisor ; IoT ; Management of Computing and Information Systems ; Mobile ; National security ; Networks ; Operating Systems ; Science & Technology ; Security ; Special Issue Paper ; Technology ; Telecommunications services industry ; Virtualization},
}

@article{KawadaTomoaki2020TRCI,
issn = {0885-7458},
abstract = {Control-Flow Integrity (CFI) is a class of defensive techniques against control-flow attacks such as Return-Oriented Programming. We propose a light-weight CFI scheme for RTOS-based applications, TZmCFI, which utilizes TrustZone for Armv8-M, a hardware-assisted security feature for embedded systems with tight resource constraints. TZmCFI embodies several existing CFI techniques to provide a comprehensive protection. The traditional shadow stack technique is used to ensure stack integrity and validate function returns. To protect exception handlers, TZmCFI extends
shadow exception stacks
, which are a variant of the traditional shadow stack technique we proposed in our previous work, for RTOS integration and performance improvement. We conducted an experiment on Arm Versatile Express Cortex-M Prototyping System (V2M-MPS2+) to evaluate the run-time overhead of the proposed system.},
journal = {International journal of parallel programming},
pages = {216--236},
volume = {49},
publisher = {Springer US},
number = {2},
year = {2020},
title = {TZmCFI: RTOS-Aware Control-Flow Integrity Using TrustZone for Armv8-M},
copyright = {The Author(s) 2020},
language = {eng},
address = {New York},
author = {Kawada, Tomoaki and Honda, Shinya and Matsubara, Yutaka and Takada, Hiroaki},
keywords = {Article ; Computer Science ; Computer Science, Theory & Methods ; Control systems ; Control-flow attacks ; Embedded systems ; Operating systems ; Processor Architectures ; Real-time control ; Real-time operating systems ; Real-time systems ; Science & Technology ; Software Engineering/Programming and Operating Systems ; Technology ; Theory of Computation ; TrustZone ; Usage},
}

@article{ZhangDiming2020iIfs,
issn = {0167-739X},
abstract = {Security is essential in mobile computing. And, therefore, various access control modules have been introduced. However, the complicated mobile runtime environment may directly impact on the integrity of these security modules, or even compels them to make wrong access control decisions. Therefore, for a trusted Flask based security system, it needs to be isolated from the dangerous mobile execution environment at runtime. In this paper, we propose an isolated Flask security architecture called iFlask to solve this problem for the Flask-based mandatory access control (MAC) system. iFlask puts its security server subsystem into the enclave provided by the ARM TrustZone so as to avert the negative impacts of the malicious environment. In the meanwhile, iFlask’s object manager subsystems which run in the mobile system kernel use a built-in supplicant proxy to effectively lookup policy decisions made by the back-end security server residing in the enclave, and to enforce these rules on the system with trustworthy behaviors. Moreover, to protect iFlask’s components which are not protected by the enclave, we not only provide an exception trap mechanism that enables TrustZone to enlarge its protection scope to protect selected memory regions from the malicious system, but also establish a secure communication channel to the enclave as well. The prototype is implemented on SELinux, which is the widely used Flask-based MAC system, and the base of SEAndroid. The experimental results show that SELinux receives reliable protection, because it resists all known vulnerabilities (e.g., CVE-2015-1815) and remains unaffected by the attacks in the test set. The propose architecture have very slight impact on the performance, it shows a performance degradation ranges between 0.53\% to 6.49\% compared to the naked system.
•iFlask security architecture shows superior security.•iFlask introduces low overhead.•iFlask has been tested thoroughly to verify its effectiveness.},
journal = {Future generation computer systems},
pages = {531--537},
volume = {109},
publisher = {Elsevier B.V},
year = {2020},
title = {iFlask: Isolate flask security system from dangerous execution environment by using ARM TrustZone},
copyright = {2018 Elsevier B.V.},
language = {eng},
address = {AMSTERDAM},
author = {Zhang, Diming and You, Shaodi},
keywords = {Computer Science ; Computer Science, Theory & Methods ; iFlask ; Isolation ; Science & Technology ; Technology ; TrustZone},
}

@inproceedings{JiangHang2017IaAS,
abstract = {In recent years, mobile terminals and other smart devices are an indispensable part of daily life, and a large amount of personal privacy data is stored on the smart devices. Because security threats has been moved from the traditional desktop computers to the mobile terminals, it is imperative to protect the security of the sensitive data on the devices. A variety of security defense solutions based on ARM TrustZone are proposed by academic and industry in last ten years, which are used to prevent system kernel and stored data being attacked. In these solutions, the devices need to have the ability to resist attacks in the boot phase. In this paper, we propose a scheme of secure boot based on TrustZone, in order to ensure that the security of operating system and prevent the device from being attacked during start-up process. We build an isolated execution environment on Xilinx zynq-zc702 evaluation board which runs the OP-TEE kernel in the secure world and Linux in the normal world. Then we build the trust chain using hardware encryption on zynq-zc702 FPGA, so as to prevent malicious attacks in the start-up process of the device. Finally, the experimental results show that the proposed scheme can prevent the malicious attack during the start-up process of the device. Moreover, the verification proved by Demper-Shafer theory demonstrates that our trust chain is more trusted than the trust chain defined by TCG.},
pages = {336--340},
volume = {2018-},
publisher = {IEEE},
booktitle = {2017 13th International Conference on Computational Intelligence and Security (CIS)},
isbn = {9781538648223},
year = {2017},
title = {Implementing a ARM-Based Secure Boot Scheme for the Isolated Execution Environment},
copyright = {Copyright 2018 Elsevier B.V., All rights reserved.},
language = {eng},
author = {Jiang, Hang and Chang, Rui and Ren, Lu and Dong, Weiyu},
keywords = {ARM TrustZone ; Computational intelligence ; Integrated circuits ; secure boot ; Security ; Trusted execution environment},
}

